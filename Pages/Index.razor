@page "/{ClueId}"
@using ScavengerHunt.Data
@inject SheetService SheetService
@inject IJSRuntime JsRuntime

<PageTitle>Scavenger Hunt</PageTitle>

<h1>Verification</h1>

<label>
    Enter your UAH username:
    <input @bind="_username"/>
</label>
<button type="button" class="btn btn-primary" @onclick="CheckUser">
    Submit
</button>

@code
{
    private string? _clue;
    private string _username = "";
    private bool _hasChecked;
    private bool _exists = true;

    [Parameter]
    public string ClueId { get; set; } = null!;

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!await SheetService.DoesClueExist(ClueId) && firstRender)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Could not find this clue, check your url");
            _exists = false;
        }
    }

    private async Task CheckUser()
    {
        if (_hasChecked)
        {
            await JsRuntime.InvokeVoidAsync("alert", "You have already peeked at the clue, if you need another hint, scan again!");
            return;
        }
        var doesUserExistTask = SheetService.DoesUserExist(_username);
        if (!_exists)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Could not find this clue, check your url");
            return;
        }
        var getClueTask = SheetService.GetRandomClue(ClueId);
        if (await doesUserExistTask)
        {
            var userScanTask = SheetService.RecordUserScan(ClueId, _username, DateTime.Now);
            _hasChecked = true;
            _clue = await getClueTask;
            await JsRuntime.InvokeVoidAsync("alert", "Success! The clue is: " + _clue);
            await userScanTask;
        } else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Sorry, we couldn't find your username, are you sure it's entered correctly?");
        }
    }
}
